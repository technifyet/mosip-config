
# Follow properites have their values assigned via 'overrides' environment variables of config server docker.
# DO NOT define these in any of the property files.  They must be passed as env variables.  Refer to config-server
# helm chart:
# db.dbuser.password 
# mosip.mosip.regproc.client.secret
# mosip.api.internal.host
# keycloak.host

mosip.api.internal.url=https://${mosip.api.internal.host}
registration.processor.zone=default

## Health check
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=info,health,refresh

## ABIS 
# Maximum abis records to be fetched at a time
registration.processor.abis.maxResults=30
# Dummy Tag for face in cbeff file
registration.processor.abis.targetFPIR=30
# supported 'byte' and 'text format
activemq.message.format=text
# Buffer time above the expiry for all queues to allow reprocessing (in seconds)
registration.processor.bio.dedupe.reprocess.buffer.time=9000

## Database
## Database properties
# Database hostname below is assuming postgres is running inside cluster in 'postgres' namespace
# If database is external to production, provide the DNS or ip of the host and port 
#mosip.registration.processor.database.hostname=postgres-postgresql.postgres.svc.cluster.local
mosip.registration.processor.database.hostname=172.18.11.235
mosip.registration.processor.database.port=5000
javax.persistence.jdbc.driver=org.postgresql.Driver
javax.persistence.jdbc.url=jdbc:postgresql://${mosip.registration.processor.database.hostname}:${mosip.registration.processor.database.port}/mosip_regprc?currentSchema=regprc
javax.persistence.jdbc.user=regprcuser
javax.persistence.jdbc.password=${db.dbuser.password}

## Hibernate
hibernate.hbm2ddl.auto=none
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate.jdbc.lob.non_contextual_creation=true
hibernate.show_sql=false

## Packets
## This must match mounted folder specified in the helm chart of packet receiver.
registration.processor.LANDING_ZONE = /mnt/landing
# The known packet sources. Should be set as all fieldCategory present in idschema
# (NOTE : if fieldCategory is set as pvt then the source should be id)
registration.processor.sourcepackets=id,evidence,optional
# The mandatory default source packet. (In default configuration this is thd id packet)
packet.default.source=id
# the default schema field cagegory (ex - private)
schema.default.fieldCategory=pvt,none
# The IDSchemaVersion used to create packets in reg-proc
IDSchema.Version=0.1
## TODO: correct this
NGINXDMZURL=http://regproc-pktserver.regproc/
packet.info.storage.service=*

## Camel bridge
# Url to cluster manager to enable this stage for joining the cluster in secure zone
cluster.manager.file.name=hazelcast_default.xml
# Workel pool size to process multiple requests parallely 
worker.pool.size=10
# Route files corresponding to the secure flow
camel.secure.active.flows.file.names=registration-processor-camel-routes-new-default.xml,registration-processor-camel-routes-update-default.xml,registration-processor-camel-routes-activate-default.xml,registration-processor-camel-routes-res-update-default.xml,registration-processor-camel-routes-deactivate-default.xml,registration-processor-camel-routes-lost-default.xml,registration-processor-camel-routes-res-reprint-default.xml

## Token generation
token.request.id=io.mosip.registration.processor
token.request.appid=regproc
## TODO: unused, remove
token.request.username=registrationprocessor
## TODO: unused, remove
token.request.password=
token.request.version=1.0
token.request.clientId=mosip-regproc-client
token.request.secretKey=${mosip.mosip.regproc.client.secret}
# Token generation issuer url. NOTE: The url here must match the one mentioned in keycloak auth token, otherwise
# performance of system will be severly affected.
token.request.issuerUrl=${keycloak.host}/auth/realms/mosip

## Audit Service
AUDIT=http://auditmanager.kernel/v1/auditmanager/audits

## Auth Service
authmanager.base.url=http://authmanager.kernel
PASSWORDBASEDTOKENAPI=${authmanager.base.url}/v1/authmanager/authenticate/useridPwd
KEYBASEDTOKENAPI=${authmanager.base.url}/v1/authmanager/authenticate/clientidsecretkey
TOKENVALIDATE=${authmanager.base.url}/v1/authmanager/authorize/admin/validateToken
GETRIDFROMUSERID=${authmanager.base.url}/v1/authmanager/rid
IDAINTERNAL=http://ida-internal.ida
INTERNALAUTH=${IDAINTERNAL}/idauthentication/v1/internal/auth

## Master Data Services
MASTER=http://masterdata.kernel/v1/masterdata
MACHINEHISTORY=${MASTER}/machineshistories
CENTERHISTORY=${MASTER}/registrationcentershistory
CENTERUSERMACHINEHISTORY=${MASTER}/getregistrationmachineusermappinghistory
REVERSEDATASYNC=http://prereg-datasync-service/preregistration/v1/sync/consumedPreRegIds
CENTERDETAILS=${MASTER}/registrationcenters
MACHINEDETAILS=${MASTER}/machines
DEVICESHISTORIES=${MASTER}/deviceshistories
REGISTRATIONCENTERDEVICEHISTORY=${MASTER}/registrationcenterdevicehistory
REGISTRATIONCENTERTIMESTAMP=${MASTER}/registrationcenters/validate
GENDER=${MASTER}/gendertypes/validate
REGION=${MASTER}/locations/validate
CITY=${MASTER}/locations/validate
POSTALCODE=${MASTER}/locations/validate
PROVINCE=${MASTER}/locations/validate
USERDETAILS=${MASTER}/users
TEMPLATES=${MASTER}/templates
DEVICEVALIDATEHISTORY=http://pms-partner.pms/v1/partnermanager/deviceprovidermanagement/validate
#To get the idschema from masterdata db
IDSCHEMA=${MASTER}/idschema/latest

## ID Repository Services
IDREPOSITORY=http://identity.idrepo/idrepository/v1/identity/
IDREPOGETIDBYUIN=http://identity.idrepo/idrepository/v1/identity/idvid
UINGENERATOR=http://idgenerator.kernel/v1/idgenerator/uin
RETRIEVEIDENTITYFROMRID=http://identity.idrepo/idrepository/v1/identity/idvid
RETRIEVEIDENTITY=http://identity.idrepo/idrepository/v1/identity/idvid
CREATEVID=http://vid.idrepo/idrepository/v1/vid
GETUINBYVID=http://vid.idrepo/idrepository/v1/idvid
CREDENTIALREQUEST=http://credentialrequest.idrepo/v1/credentialrequest/requestgenerator
GETVIDSBYUIN=http://vid.idrepo/idrepository/v1/vid/uin

## Encrypt Services
KEYMANAGER=http://keymanager.keymanager/
ENCRYPTURL=${KEYMANAGER}/v1/keymanager/encrypt
ENCRYPTIONSERVICE=${KEYMANAGER}/v1/keymanager/publickey
PDFSIGN=${KEYMANAGER}/v1/keymanager/pdf/sign

## Digital Signature Service
DIGITALSIGNATURE=${KEYMANAGER}/v1/keymanager/sign
mosip.registration.processor.digital.signature.id=io.mosip.registration.processor

## Crypto
CRYPTOMANAGERDECRYPT=${KEYMANAGER}/v1/keymanager/decrypt
crypto.PrependThumbprint.enable=true

## External Service
EISERVICE=http://regproc-eis.regproc/registrationprocessor/v1/eis/registration-processor/external-integration-service/v1.0

## RID Generation Service
RIDGENERATION=http://ridgenerator.kernel/v1/ridgenerator/generate/rid

## Registration Processor Status Services
SYNCSERVICE=http://regproc-status.regproc/registrationprocessor/v1/registrationstatus/sync
PACKETRECEIVER=http://regproc-receiver.regproc/registrationprocessor/v1/packetreceiver/registrationpackets

## SMS and EMAIL notification services
NOTIFIER=http://notifier.kernel
SMSNOTIFIER=${NOTIFIER}/v1/notifier/sms/send
EMAILNOTIFIER=${NOTIFIER}/v1/notifier/email/send

## PMS
PMS=http://pms-policy.pms/v1/policymanager/policies

## Registration status properties
registration.processor.max.retry=10
mosip.registration.processor.registration.status.id=mosip.registration.status
mosip.registration.processor.registration.sync.id=mosip.registration.sync
mosip.registration.processor.registration.transaction.id=mosip.registration.transaction
mosip.registration.processor.sync.version=1.0
mosip.registration.processor.registration.status.version=1.0
mosip.registration.processor.transaction.version=1.0

## Demo dedupe
application.id=REGISTRATION
# Status for matched records in demo dedupe stage
registration.processor.demodedupe.manualverification.status=REJECTED
mosip.registration.processor.demographic.deduplication.enable=true

## Manual verification
mosip.registration.processor.manual.verification.assignment.id=mosip.manual.verification.assignment
mosip.registration.processor.manual.verification.decision.id=mosip.manual.verification.decision
mosip.registration.processor.manual.verification.biometric.id=mosip.manual.verification.biometric
mosip.registration.processor.manual.verification.demographic.id=mosip.manual.verification.demographic
mosip.registration.processor.manual.verification.packetinfo.id=mosip.manual.verification.packetinfo
# Manual verification queue message expiry in seconds, if given 0 then message will never expire
registration.processor.queue.manualverification.request.messageTTL=5400
# Buffer time above the expiry queue to allow reprocessing (in seconds)
registration.processor.manual.verification.reprocess.buffer.time=9000
registration.processor.manual.adjudication.policy.id=mpolicy-default-adjudication
registration.processor.manual.adjudication.subscriber.id=mpartner-default-adjudication
registration.processor.manual.adjudication.json=registration-processor-abis.json

config.server.file.storage.uri=${spring.cloud.config.uri}/${packet.info.storage.service}/${spring.profiles.active}/${spring.cloud.config.label}/

## OSI validate
mosip.workinghour.validation.required=true
registration.processor.applicant.dob.format=yyyy/MM/dd
mosip.identity.auth.internal.requestid=mosip.identity.auth.internal
registration.processor.validate.introducer=true
mosip.kernel.device.validate.history.id=""
## UMC: User, Machine, Center
mosip.registartion.processor.validateUMC=false
auth.PrependThumbprint.enable=false

## Packet receiver
registration.processor.max.file.size=5
mosip.registration.processor.application.version=1.0
mosip.registration.processor.datetime.pattern=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
mosip.registration.processor.timezone=GMT
mosip.registration.processor.packet.id=mosip.registration.packet
mosip.registration.processor.grace.period=10800

registration.processor.wait.period=1

## UIN generation
registration.processor.id.repo.create=mosip.id.create
registration.processor.id.repo.read=mosip.id.read
registration.processor.id.repo.update=mosip.id.update
registration.processor.id.repo.vidType=Perpetual
registration.processor.id.repo.generate=mosip.vid.create
registration.processor.id.repo.vidVersion=v1

## Virus scanner
registration.processor.packet.ext=.zip
mosip.kernel.virus-scanner.host=clamav.clamav
mosip.kernel.virus-scanner.port=80
registration.processor.application.id=REGISTRATION
registration.processor.rid.machineidsubstring=10

## Message sender
# Mapping identity json to map with the applicant id json
registration.processor.identityjson=registration-processor-identity.json
registration.processor.print.textfile=registration-processor-print-text-file.json
registration.processor.abis.json=registration-processor-abis.json
registration.processor.demographic.identity=identity
registration.processor.notification.emails=

## Email
registration.processor.uin.generated.subject=UIN Generated
registration.processor.duplicate.uin.subject=Registration Failed because you have already Registered
registration.processor.reregister.subject=Re-Register because there was a Technical Issue
registration.processor.uin.activated.subject=Uin is activated successfully
registration.processor.uin.deactivated.subject=Uin is deactivated
registration.processor.updated.subject=UIN Details Updated

## Queue
registration.processor.queue.username=artemis
registration.processor.queue.password=JeQiaRC1wy
registration.processor.queue.url=tcp://172.18.10.58:31616
registration.processor.queue.typeOfQueue=ACTIVEMQ
registration.processor.queue.address = print-service
registration.processor.queue.printpostaladdress = postal-service

# Enable proxy postal service response for test environments where actual postal service wont be available
# IMPORTANT : This should always be set as false in actual production environment
registration.processor.enable.proxy.postalservice=true

## Packet validator
registration.processor.masterdata.validation.attributes = gender,region,province,city
registration.processor.validateSchema=false
registration.processor.validateFile=false
registration.processor.validateChecksum=false
registration.processor.validateApplicantDocument=false
registration.processor.validateMasterData=false
registration-processor.validatemandotary=false
registration.processor.document.category=idobject-document-category-mapping.json
registration.processor.applicant.type=applicanttype-document-mapping.json

## Packet generator
registration.processor.audit.applicationId=PACGEN
registration.processor.audit.applicationName=PACKET_GENERATOR
mosip.registration.processor.registration.packetgenerator.id=mosip.registration.packetgenerator
mosip.registration.processor.uincard.reprint.id = mosip.uincard.reprint
mosip.registration.processor.packetgenerator.version=1.0
mosip.registration.processor.resident.service.id=mosip.registration.update
mosip.registration.processor.lost.id=mosip.registration.lost

## Print stage
mosip.registration.processor.print.service.id=mosip.registration.print
registration.processor.unMaskedUin.length=4
mosip.registration.processor.print.service.uincard.password=postalCode|fullName
# Header length to be removed from iso image to get actual image
mosip.print.uin.header.length=73
# Rectangle coordinates for pfd signataured data
mosip.registration.processor.print.service.uincard.lowerleftx=73
mosip.registration.processor.print.service.uincard.lowerlefty=100
mosip.registration.processor.print.service.uincard.upperrightx=300
mosip.registration.processor.print.service.uincard.upperrighty=300
mosip.registration.processor.print.service.uincard.signature.reason="signing"

## Reprocessor stage
# Number of the reprocess records to be fetched at a time
registration.processor.reprocess.fetchsize=300
# The reprocessor scheduler configurations
# The elapse time (in sec) beyond which the rids will be considered for reprocessing
registration.processor.reprocess.elapse.time=600
# The maximum reprocess count. Beyond this the rid will not be considered for reprocessing.
registration.processor.reprocess.attempt.count=300
registration.processor.reprocess.type=cron
registration.processor.reprocess.seconds=0
# TODO: time reduced for testing.  Revert for production.
registration.processor.reprocess.minutes=*
registration.processor.reprocess.hours=*
registration.processor.reprocess.days_of_month=*
registration.processor.reprocess.months=*
registration.processor.reprocess.days_of_week=*

## WorkflowAction api id
mosip.regproc.workflow.action.api-id=mosip.registration.processor.workflow.action
mosip.regproc.workflow.action.version=1.0
mosip.regproc.workflow.action.hotlisted-tag=HOTLISTED
mosip.regproc.workflow.action.resumefrombeginning.stage=PacketUploaderStage
#WorkflowAction service  websub topic name
mosip.regproc.workflow.complete.topic=registration_processor_workflow_completed_event

#Service Ids
#Audit request id
mosip.registration.processor.audit.id=mosip.applicanttype.getApplicantType
#Cryptomanager decrypt request id
mosip.registration.processor.crypto.decrypt.id=mosip.cryptomanager.decrypt
#SMS notification request id
mosip.registration.processor.sms.id=mosip.sms.send
#Email notification request id
mosip.registration.processor.email.id=mosip.email.send

#Kernel Crypto signature
registration.processor.signature.isEnabled=true

#BioDedupe stage
registration.processor.infant.dedupe=N

# ID Authentication 
IDAUTHENCRYPTION=${IDAINTERNAL}/idauthentication/v1/internal/encrypt
IDAUTHPUBLICKEY=${IDAINTERNAL}/idauthentication/v1/internal/publickey
IDAUTHCERTIFICATE=${IDAINTERNAL}/idauthentication/v1/internal/getCertificate
ida-internal-auth-uri=${IDAINTERNAL}/idauthentication/v1/internal/auth
ida-internal-get-certificate-uri=${IDAINTERNAL}/idauthentication/v1/internal/getCertificate

registration.processor.objectstore.adapter.name=S3Adapter
packetmanager.base.url=http://packetmanager.packetmanager/commons
PACKETMANAGER_SEARCH_FIELD=${packetmanager.base.url}/v1/packetmanager/searchField
PACKETMANAGER_SEARCH_FIELDS=${packetmanager.base.url}/v1/packetmanager/searchFields
PACKETMANAGER_SEARCH_METAINFO=${packetmanager.base.url}/v1/packetmanager/metaInfo
PACKETMANAGER_VALIDATE=${packetmanager.base.url}/v1/packetmanager/validatePacket
PACKETMANAGER_SEARCH_DOCUMENT=${packetmanager.base.url}/v1/packetmanager/document
PACKETMANAGER_SEARCH_BIOMETRICS=${packetmanager.base.url}/v1/packetmanager/biometrics
PACKETMANAGER_SEARCH_AUDITS=${packetmanager.base.url}/v1/packetmanager/audits
PACKETMANAGER_INFO=${packetmanager.base.url}/v1/packetmanager/info
PACKETMANAGER_UPDATE_TAGS=${packetmanager.base.url}/v1/packetmanager/addOrUpdateTag
PACKETMANAGER_DELETE_TAGS=${packetmanager.base.url}/v1/packetmanager/deleteTag
DATASHARE=http://datashare.datashare
DATASHARECREATEURL=${DATASHARE}/v1/datashare/create
DATASHAREGETEURL=${DATASHARE}/v1/datashare/get
# Default abis is mock-abis provided by MOSIP
registration.processor.policy.id=mpolicy-default-abis
registration.processor.subscriber.id=mpartner-default-abis

#iam adapter
mosip.auth.adapter.impl.basepackage=io.mosip.kernel.auth.defaultadapter

# BioSDK 
mosip.biometric.sdk.provider.finger.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
mosip.biometric.sdk.provider.iris.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
mosip.biometric.sdk.provider.face.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0

## Printing
mosip.registration.processor.credentialtype=euin
mosip.registration.processor.encrypt=false
mosip.registration.processor.issuer=mpartner-default-print 
mosip.registration.processor.credential.request.service.id=mosip.credential.request.generator 

## Stage common
#After this time intervel, message should be considered as expired (In seconds), 
#value as 0 and negative will disable message expiry checks
mosip.regproc.common.stage.message.expiry-time-limit=3600
#mosip.regproc.common.stage.message.expiry-time-limit=259200

## Kafka Event bus
#Supported eventbus types: vertx, kafka. Defaults to vertx if the config is not given
mosip.regproc.eventbus.type=kafka

#Kafka event bus config, will be used only when the type is kafka
#Kafka cluster servers comma separated, common for all stages and camel
mosip.regproc.eventbus.kafka.bootstrap.servers=kafka-0.kafka-headless.kafka.svc.cluster.local:9092,kafka-1.kafka-headless.kafka.svc.cluster.local:9092,kafka-2.kafka-headless.kafka.svc.cluster.local:9092

# packet receiver stage
#Supported commmit config: auto, batch, single
mosip.regproc.packet.receiver.eventbus.kafka.commit.type=single
mosip.regproc.packet.receiver.eventbus.kafka.max.poll.records=100
mosip.regproc.packet.receiver.eventbus.kafka.poll.frequency=100
mosip.regproc.packet.receiver.eventbus.kafka.group.id=packet-receiver-stage

# packet secure notification
#Supported commmit config: auto, batch, single
mosip.regproc.securezone.notification.eventbus.kafka.group.id=secure-notification-stage
mosip.regproc.securezone.notification.eventbus.kafka.commit.type=single
mosip.regproc.securezone.notification.eventbus.kafka.max.poll.records=100
mosip.regproc.securezone.notification.eventbus.kafka.poll.frequency=100
mosip.regproc.securezone.notification.eventbus.kafka.group.id=secure-notification-stage
mosip.regproc.securezone.notification.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#camel-bridge
mosip.regproc.camel.bridge.eventbus.kafka.commit.type=single
mosip.regproc.camel.bridge.eventbus.kafka.max.poll.records=100
mosip.regproc.camel.bridge.eventbus.kafka.poll.frequency=100
#Above 3 camel kafka config will have no effect, it is kept because MosipBridgeFactory extends 
#MosipVerticleAPIManager
mosip.regproc.camel.bridge.eventbus.kafka.group.id=camel-brdige-mz

#packet-uploader-stage
mosip.regproc.packet.uploader.eventbus.kafka.commit.type=single
mosip.regproc.packet.uploader.eventbus.kafka.max.poll.records=100
mosip.regproc.packet.uploader.eventbus.kafka.poll.frequency=100
mosip.regproc.packet.uploader.eventbus.kafka.group.id=packet-uploader-stage
mosip.regproc.packet.uploader.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#packet-validator-stage
mosip.regproc.packet.validator.eventbus.kafka.commit.type=single
mosip.regproc.packet.validator.eventbus.kafka.max.poll.records=100
mosip.regproc.packet.validator.eventbus.kafka.poll.frequency=100
mosip.regproc.packet.validator.eventbus.kafka.group.id=packet-validator-stage
mosip.regproc.packet.validator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#packet-classifier-stage
mosip.regproc.packet.classifier.eventbus.kafka.commit.type=single
mosip.regproc.packet.classifier.eventbus.kafka.max.poll.records=100
mosip.regproc.packet.classifier.eventbus.kafka.poll.frequency=100
mosip.regproc.packet.classifier.eventbus.kafka.group.id=packet-classifier-stage
mosip.regproc.packet.classifier.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#quality-checker-stage
mosip.regproc.quality.checker.eventbus.kafka.commit.type=single
mosip.regproc.quality.checker.eventbus.kafka.max.poll.records=100
mosip.regproc.quality.checker.eventbus.kafka.poll.frequency=100
mosip.regproc.quality.checker.eventbus.kafka.group.id=quality-checker-stage
mosip.regproc.quality.checker.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#osi-validator-stage
mosip.regproc.osi.validator.eventbus.kafka.commit.type=single
mosip.regproc.osi.validator.eventbus.kafka.max.poll.records=100
mosip.regproc.osi.validator.eventbus.kafka.poll.frequency=100
mosip.regproc.osi.validator.eventbus.kafka.group.id=osi-validator-stage
mosip.regproc.osi.validator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#external-stage
mosip.regproc.external.eventbus.kafka.commit.type=single
mosip.regproc.external.eventbus.kafka.max.poll.records=100
mosip.regproc.external.eventbus.kafka.poll.frequency=100
mosip.regproc.external.eventbus.kafka.group.id=external-stage
mosip.regproc.external.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#demo-dedupe-stage
mosip.regproc.demo.dedupe.eventbus.kafka.commit.type=single
mosip.regproc.demo.dedupe.eventbus.kafka.max.poll.records=100
mosip.regproc.demo.dedupe.eventbus.kafka.poll.frequency=100
mosip.regproc.demo.dedupe.eventbus.kafka.group.id=demo-dedupe-stage
mosip.regproc.demo.dedupe.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#abis-handler-stage
mosip.regproc.abis.handler.eventbus.kafka.commit.type=single
mosip.regproc.abis.handler.eventbus.kafka.max.poll.records=100
mosip.regproc.abis.handler.eventbus.kafka.poll.frequency=100
mosip.regproc.abis.handler.eventbus.kafka.group.id=abis-handler-stage
mosip.regproc.abis.handler.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#bio-dedupe-stage
mosip.regproc.bio.dedupe.eventbus.kafka.commit.type=single
mosip.regproc.bio.dedupe.eventbus.kafka.max.poll.records=100
mosip.regproc.bio.dedupe.eventbus.kafka.poll.frequency=100
mosip.regproc.bio.dedupe.eventbus.kafka.group.id=bio-dedupe-stage
mosip.regproc.bio.dedupe.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#manual-verification-stage
mosip.regproc.manual.verification.eventbus.kafka.commit.type=single
mosip.regproc.manual.verification.eventbus.kafka.max.poll.records=100
mosip.regproc.manual.verification.eventbus.kafka.poll.frequency=100
mosip.regproc.manual.verification.eventbus.kafka.group.id=manual-verification-stage
mosip.regproc.manual.verification.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#uin-generator-stage
mosip.regproc.uin.generator.eventbus.kafka.commit.type=single
mosip.regproc.uin.generator.eventbus.kafka.max.poll.records=100
mosip.regproc.uin.generator.eventbus.kafka.poll.frequency=100
mosip.regproc.uin.generator.eventbus.kafka.group.id=uin-generator-stage
mosip.regproc.uin.generator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#abis-middle-ware-stage
mosip.regproc.abis.middleware.eventbus.kafka.commit.type=single
mosip.regproc.abis.middleware.eventbus.kafka.max.poll.records=100
mosip.regproc.abis.middleware.eventbus.kafka.poll.frequency=100
mosip.regproc.abis.middleware.eventbus.kafka.group.id=abis-middle-ware-stage
mosip.regproc.abis.middleware.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#biometric-authentication-stage
mosip.regproc.biometric.authentication.eventbus.kafka.commit.type=single
mosip.regproc.biometric.authentication.eventbus.kafka.max.poll.records=100
mosip.regproc.biometric.authentication.eventbus.kafka.poll.frequency=100
mosip.regproc.biometric.authentication.eventbus.kafka.group.id=biometric-authentication-stage
mosip.regproc.biometric.authentication.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#reprocessor-stage
mosip.regproc.reprocessor.eventbus.kafka.commit.type=single
mosip.regproc.reprocessor.eventbus.kafka.max.poll.records=100
mosip.regproc.reprocessor.eventbus.kafka.poll.frequency=100
mosip.regproc.reprocessor.eventbus.kafka.group.id=reprocessor-stage

#message-sender-stage
mosip.regproc.message.sender.eventbus.kafka.commit.type=single
mosip.regproc.message.sender.eventbus.kafka.max.poll.records=100
mosip.regproc.message.sender.eventbus.kafka.poll.frequency=100
mosip.regproc.message.sender.eventbus.kafka.group.id=message-sender-stage
mosip.regproc.message.sender.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#printing-stage
mosip.regproc.printing.eventbus.kafka.commit.type=single
mosip.regproc.printing.eventbus.kafka.max.poll.records=100
mosip.regproc.printing.eventbus.kafka.poll.frequency=100
mosip.regproc.printing.eventbus.kafka.group.id=printing-stage
mosip.regproc.printing.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

packetmanager.name.source.resident=RESIDENT
packetmanager.name.source.cnie=CNIE
packetmanager.name.source.default=REGISTRATION_CLIENT
object.store.s3.use.account.as.bucketname=true

# default priority for correction packets
# To define priority use below stage names. For example, field 'gender' has priority in uin-generator-stage. The key for uin-generator-stage is 'uingenerator'. So the key would be 'packetmanager.provider.uingenerator.gender'
# packetreceiver,packetuploader,packetvalidator,qualitychecker,osivalidator,demodedupe,classification,biodedupe,bioauth,manualverification,uingenerator,messagesender
packetmanager.provider.uingenerator.lastName=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.gender=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.city=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.modeOfClaim=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cregion=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.postalCode=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cprovince=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.suffix=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.bloodType=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.referenceIdentityNumber=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Finger]=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Iris]=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Face]=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.province=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine4=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.zone=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine3=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine2=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine1=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine1=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine2=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.residenceStatus=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine3=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine4=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.email=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.czone=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.dateOfBirth=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cpostalCode=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.ccity=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.firstName=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.IDSchemaVersion=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.phone=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.registrationType=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.middleName=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.UIN=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.region=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.maritalStatus=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.parentOrGuardianUIN=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.parentOrGuardianRID=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfAddress=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfDateOfBirth=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfIdentity=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfRelationship=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfException=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT

# packet-classifier-stage
# List of tag generator that should be run on every packet
# Available tag generators MosipIDObjectFields,MosipMetaInfo,MosipAgeGroup,MosipSupervisorApprovalStatus,MosipExceptionBiometrics
mosip.regproc.packet.classifier.tag-generators=MosipIDObjectFields,MosipMetaInfo,MosipAgeGroup,MosipSupervisorApprovalStatus,MosipExceptionBiometrics
# The tag value that will be used by default when the packet does not have value for the tag field
mosip.regproc.packet.classifier.tagging.not-available-tag-value=--TAG_VALUE_NOT_AVAILABLE--
# These field names should be as in keys of registraion-processor-identity.json file Identity segment
# and should have proper default source configured
mosip.regproc.packet.classifier.tagging.idobjectfields.mapping-field-names=gender,residenceStatus
# The tag name that will be prefixed with every idobjectfield tags
mosip.regproc.packet.classifier.tagging.idobjectfields.tag-name-prefix=ID_OBJECT-
# The tag name that will be prefixed with every metainfo operationsData tags
mosip.regproc.packet.classifier.tagging.metainfo.operationsdata.tag-name-prefix=META_INFO-OPERATIONS_DATA-
# The tag name that will be prefixed with every metainfo metaData tags
mosip.regproc.packet.classifier.tagging.metainfo.metadata.tag-name-prefix=META_INFO-META_DATA-
# The tag name that will be prefixed with every metainfo capturedRegisteredDevices tags 
mosip.regproc.packet.classifier.tagging.metainfo.capturedregistereddevices.tag-name-prefix=META_INFO-CAPTURED_REGISTERED_DEVICES-
# The labels on metainfo.operationsData array that needs to be tagged
mosip.regproc.packet.classifier.tagging.metainfo.operationsdata.tag-labels=officerId
# The labels on metainfo.metaData array that needs to be tagged
mosip.regproc.packet.classifier.tagging.metainfo.metadata.tag-labels=centerId
# The serial numbers of devices type on metainfo.capturedRegisteredDevices array that needs to be tagged
mosip.regproc.packet.classifier.tagging.metainfo.capturedregistereddevices.device-types=Face,Finger
# Tag name that will be used while tagging age group
mosip.regproc.packet.classifier.tagging.agegroup.tag-name=AGE_GROUP
# Below age ranges map should contain proper age group name and age range, any overlap of the age 
# range will result in a random behaviour of tagging. In range, upper and lower values are inclusive.
mosip.regproc.packet.classifier.tagging.agegroup.ranges={'CHILD':'0-17','ADULT':'18-59','SENIOR_CITIZEN':'60-200'}
# Tag name that will be used while tagging supervisor approval status
mosip.regproc.packet.classifier.tagging.supervisorapprovalstatus.tag-name=SUPERVISOR_APPROVAL_STATUS
# Tag name that will be used while tagging exception biometrics
mosip.regproc.packet.classifier.tagging.exceptionbiometrics.tag-name=EXCEPTION_BIOMETRICS
# This mapping will contain the short words for each missing biometrics, the values will used for concatenating in the tags
mosip.regproc.packet.classifier.tagging.exceptionbiometrics.bio-value-mapping={'leftLittle':'LL','leftRing':'LR','leftMiddle':'LM','leftIndex':'LI','leftThumb':'LT','rightLittle':'RL','rightRing':'RR','rightMiddle':'RM','rightIndex':'RI','rightThumb':'RT','leftEye':'LE','rightEye':'RE'}

## Mock Manual Verification Properties 
# Based on value of below parameter the packets are passed or rejected. Required values are [APPROVED or REJECTED]
mock.mv.decision=APPROVED 

GETINDIVIDUALIDFROMUSERID=${authmanager.base.url}/v1/authmanager/individualId
