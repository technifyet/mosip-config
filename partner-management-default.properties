## Follow properites have their values assigned via 'overrides' environment variables of config server docker.
## DO NOT define these in any of the property files.  They must be passed as env variables.  Refer to config-server
## helm chart:
## db.dbuser.password 
## mosip.mosip.partner.client.secret
## mosip.mosip.pms.client.secret
## keycloak.host
## keycloak.admin.password
## mosip.api.public.url

## Database
## Database hostname below is assuming postgres is running inside cluster in 'postgres' namespace
## If database is external to production, provide the DNS or ip of the host and port 
mosip.pmp.database.hostname=postgres-postgresql.postgres.svc.cluster.local
mosip.pmp.database.port=5432
mosip.pmp.database.user=pmsuser
mosip.pmp.database.password=${db.dbuser.password}

## Auth device
mosip.authdevice.database.hostname=postgres-postgresql.postgres.svc.cluster.local
mosip.authdevice.database.port=5432
mosip.authdevice.database.user=authdeviceuser
mosip.authdevice.database.password=${db.dbuser.password}

## Reg device
mosip.regdevice.database.hostname=postgres-postgresql.postgres.svc.cluster.local
mosip.regdevice.database.port=5432
mosip.regdevice.database.user=regdeviceuser
mosip.regdevice.database.password=${db.dbuser.password}

## Hibernate
javax.persistence.jdbc.driverClassName=org.postgresql.Driver
javax.persistence.jdbc.driver=org.postgresql.Driver
javax.persistence.jdbc.url=jdbc:postgresql://${mosip.pmp.database.hostname}:${mosip.pmp.database.port}/mosip_pms
javax.persistence.jdbc.user=${mosip.pmp.database.user}
javax.persistence.jdbc.username=${mosip.pmp.database.user}
javax.persistence.jdbc.password=${mosip.pmp.database.password}
javax.persistence.jdbc.schema = pms
javax.persistence.jdbc.uinHashTable=uin_hash_salt
javax.persistence.jdbc.uinEncryptTable=uin_encrypt_salt

## Hibernate Auth device
mosip.datasource.authdevice.jdbc.driver=org.postgresql.Driver
mosip.datasource.authdevice.jdbc.url = jdbc:postgresql://${mosip.authdevice.database.hostname}:${mosip.authdevice.database.port}/mosip_authdevice
mosip.datasource.authdevice.jdbc.password = ${mosip.authdevice.database.password}
mosip.datasource.authdevice.jdbc.user = ${mosip.authdevice.database.user}
mosip.datasource.authdevice.jdbc.schema = authdevice
mosip.datasource.authdevice.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect

## Hibernate Reg device
mosip.datasource.regdevice.jdbc.driver=org.postgresql.Driver
mosip.datasource.regdevice.jdbc.url = jdbc:postgresql://${mosip.regdevice.database.hostname}:${mosip.regdevice.database.port}/mosip_regdevice
mosip.datasource.regdevice.jdbc.password = ${mosip.regdevice.database.password}
mosip.datasource.regdevice.jdbc.user = ${mosip.regdevice.database.user}
mosip.datasource.regdevice.jdbc.schema = regdevice
mosip.datasource.regdevice.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect

hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
hibernate.jdbc.lob.non_contextual_creation=true
hibernate.hbm2ddl.auto=none
hibernate.show_sql=true
hibernate.format_sql=true
hibernate.connection.charSet=utf8
hibernate.cache.use_second_level_cache=false
hibernate.cache.use_query_cache=false
hibernate.cache.use_structured_entries=false
hibernate.generate_statistics=false
spring.datasource.initialization-mode=never

## Application ID of PMP. Used to upload other domain certs
application.id=PARTNER
application.name=partner

## To configure starting value or initial value of mispId.
## ex: if value = 3 ==> mispId starts from  100
## if value = 4 ==> mispId starts from 1000
mosip.kernel.mispid.length = 3
mosip.kernel.idgenerator.misp.license-key-length = 50
## To configure the partner types for which extractors are required. It should be "," separated.
pmp.bioextractors.required.partner.types = Credential_Partner,Online_Verification_Partner
mosip.pmp.misp.license.expiry.period.indays = 90
mosip.pmp.partner.policy.expiry.period.indays = 90
pmp.policy.expiry.period.indays = 180
pmp.policy.schema.url= https://schemas.mosip.io/v1/auth-policy

## To configure what are the allowed policy types.
## If we add any new policy type, corresponding schema also needs to be added.
## format for adding schema configuration for new policy type is as below
## pmp.policyTypeName.policy.schema(all are in lowercase)= schema url
pmp.allowed.policy.types=Auth,DataShare,CredentialIssuance
pmp.auth.policy.schema = ${mosip.kernel.xsdstorage-uri}auth-policy-schema.json
pmp.datashare.policy.schema=${mosip.kernel.xsdstorage-uri}data-share-policy-schema.json
pmp.credentialissuance.policy.schema=${mosip.kernel.xsdstorage-uri}data-share-policy-schema.json

pmp.misp.valid.email.address.regex=^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$
pmp.partner.valid.email.address.regex=^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$
pmp.partner.partnerId.max.length=36

## Time difference between request creation and request processing
masterdata.registerdevice.timestamp.validate=+5

## Keymanager
keymanager.base.url=http://keymanager.keymanager
mosip.kernel.sign-url=${keymanager.base.url}/v1/keymanager/jwtSign

## Kernel services
mosip.kernel.masterdata.audit-url=http://auditmanager.kernel/v1/auditmanager/audits

# ApplicationId for partner
mosip.pmp.auth.appId =partner
# Kernel auth client ID for partner management services
mosip.pmp.auth.clientId=mosip-partner-client
# Kernel auth secret key for partner management services
mosip.pmp.auth.secretKey= ${mosip.mosip.partner.client.secret}
# Key manager service API's to upload certificates
pms.cert.service.token.request.clientId=${mosip.pmp.auth.clientId}
pms.cert.service.token.request.issuerUrl=http://authmanager.kernel/v1/authmanager/authenticate/clientidsecretkey
pmp.ca.certificaticate.upload.rest.uri=${keymanager.base.url}/v1/keymanager/uploadCACertificate
pmp.partner.certificaticate.upload.rest.uri=${keymanager.base.url}/v1/keymanager/uploadPartnerCertificate
pmp.partner.certificaticate.get.rest.uri=${keymanager.base.url}/v1/keymanager/getPartnerCertificate/{partnerCertId}
pmp-keymanager.upload.other.domain.cert.rest.uri=${keymanager.base.url}/v1/keymanager/uploadOtherDomainCertificate

## Keycloak
# These configurations are used to create user in keycloak and map to a role.
# Pre-Condition: All partner types should be created as roles in keycloak.
mosip.iam.base-url=${keycloak.host}
mosip.iam.realm.operations.base-url = ${mosip.iam.base-url}/auth/admin/realms/{realmId}
mosip.iam.admin-url =${mosip.iam.base-url}/auth/admin/
mosip.iam.admin-realm-id =admin
mosip.iam.roles-extn-url =realms/mosip/roles
mosip.iam.users-extn-url = realms/mosip/users
mosip.iam.role-user-mapping-url =/{userId}/role-mappings/realm
mosip.iam.open-id-url =${mosip.iam.base-url}/auth/realms/{realmId}/protocol/openid-connect/
mosip.iam.master.realm-id=master
mosip.iam.default.realm-id=mosip
mosip.keycloak.admin.client.id=admin-cli
mosip.keycloak.admin.user.id=admin
mosip.keycloak.admin.secret.key=${keycloak.admin.password}

## Auth adapter
auth.server.validate.url=http://authmanager.kernel/v1/authmanager/authorize/admin/validateToken
auth.server.admin.validate.url=http://authmanager.kernel/v1/authmanager/authorize/admin/validateToken
auth.jwt.secret=authjwtsecret
auth.jwt.base=Mosip-Token

## Security
mosip.security.csrf-enable:false
mosip.security.secure-cookie:false

partner.search.maximum.rows=10

## Allowed credential types which partner can map against to policy
pmp.allowed.credential.types=auth,qrcode,euin,reprint

## Allowed partner types who can map policies to credential types
policy.credential.type.mapping.allowed.partner.types=Credential_Partner,Online_Verification_Partner

## Allowed kyc attributes. Used to display in UI
policy.allowed.kyc.attributes = {"fullName": "Full Name","middleName": "Middle Name","lastName": "Last Name","dateOfBirth": "DateOfBirth","gender": "Gender","phone": "phone"}
## Used to display in UI
policy.auth.allowed.token.types=random,partner,policy

# IAM
mosip.iam.module.login_flow.name=authorization_code
mosip.iam.module.clientID=mosip-pms-client
mosip.iam.module.clientsecret=${mosip.mosip.pms.client.secret}
mosip.iam.module.redirecturi=https://${mosip.api.public.host}/v1/partnermanager/login-redirect/
mosip.iam.module.login_flow.scope=cls
mosip.iam.module.login_flow.response_type=code
mosip.iam.authorization_endpoint=${keycloak.host}/auth/realms/mosip/protocol/openid-connect/auth
mosip.iam.module.admin_realm_id=mosip
mosip.kernel.filtervalue.max_columns =100
mosip.iam.token_endpoint=${keycloak.host}/auth/realms/mosip/protocol/openid-connect/token

## Unused properties. TODO: delete them once they are removed from code
pmp.policy.allowed.authtokens.types=random,partner,policy
mosip.kernel.device.search-url=http://masterdata.kernel/v1/masterdata/devices/search
token.request.appid=admin
token.request.password=mosip
token.request.username=110005
token.request.version=string
token.request.id=v1
token.request.issuerUrl=http://authmanager.kernel/v1/authmanager/authenticate/clientidsecretkey
token.request.clientId=admin
PASSWORDBASEDTOKENAPI=http://authmanager.kernel/v1/authmanager/authenticate/useridPwd
application.env.local=false
